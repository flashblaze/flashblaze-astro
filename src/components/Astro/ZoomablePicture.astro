---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: ImageMetadata;
  alt: string;
  loading?: 'eager' | 'lazy';
  formats?: Array<'avif' | 'webp' | 'jpeg' | 'jpg' | 'png' | 'gif'>;
}

const { src, alt, loading = 'lazy', formats = ['avif', 'webp'] } = Astro.props;
---

<div class='zoomable-picture-container'>
  <div class='picture-wrapper'>
    <Picture
      {src}
      {alt}
      {loading}
      {formats}
      class='cursor-pointer transition-transform duration-300'
    />
  </div>
  <div class='zoom-overlay hidden'></div>
</div>

<style>
  .zoomable-picture-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .picture-wrapper {
    width: 100%;
    height: 100%;
  }

  .zoom-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 50;
    cursor: pointer;
  }

  .zoomed {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.5);
    z-index: 51;
    max-width: 50vw;
    max-height: 50vh;
    object-fit: contain;
  }
</style>

<script>
  function setupZoomablePicture() {
    const containers = document.querySelectorAll('.zoomable-picture-container');

    containers.forEach(container => {
      const picture = container.querySelector('img');
      const overlay = container.querySelector('.zoom-overlay');

      if (!picture || !overlay) return;

      picture.addEventListener('click', () => {
        picture.classList.add('zoomed');
        overlay.classList.remove('hidden');
      });

      overlay.addEventListener('click', () => {
        picture.classList.remove('zoomed');
        overlay.classList.add('hidden');
      });
    });
  }

  // Setup on initial load
  setupZoomablePicture();

  // Setup again after page transitions/dynamic updates
  document.addEventListener('astro:page-load', setupZoomablePicture);
</script>
